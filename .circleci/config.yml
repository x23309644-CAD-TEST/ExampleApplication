version: 2.1

workflows:
  version: 2
  build:
    jobs:
      - build:
          filters:
            branches: 
              only:
                - main
      # - deploy:
      #     filters:
      #       branches:
      #         only:
      #           - main
      #     requires:
      #       - build
                
jobs:
  build:
    working_directory: ~/ExampleApplication
    docker:
      - image: circleci/node:10.16.3
    steps:
      - checkout
      # - setup_remote_docker
      - run:
          name: update-npm
          command: 'sudo npm install -g npm@5'
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: install-npm-wee
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }} 
          paths:
            - ./node_modules
      # Uncomment if tests are needed
      # - run:
      #     name: test-run
      #     command: npm run test
  #     - run:
  #         name: docker-login
  #         command: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
  #     - run:
  #         name: build-docker-image
  #         command: docker build -t $IMAGE_NAME:latest .
  #     - run:
  #         name: publish-docker-image
  #         command: docker push $IMAGE_NAME
  #     - run:
  #         name: set-environment-variables
  #         command: echo $SERVER > server.crt && echo $PRIVATE_KEY > privatekey.pem
  #     - run:
  #         name: build-docker-image-for-integration-environment
  #         command: docker create -p 8443:8443 --name integration_app $IMAGE_NAME
  #     - run:
  #         name: copy-server-cert-and-private-key-accross
  #         command: docker cp ./privatekey.pem integration_app:/private.pem; docker cp ./server.crt integration_app:/server.crt
  #     - run:
  #         name: start-docker-container
  #         command: docker start integration_app
  # deploy:
  #   docker:
  #     - image: circleci/node:10.16.3
  #   steps:
  #     - run:
  #         name: deploy-application
  #         command: ssh -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_PUBLIC_DNS "export SERVER=\"$SERVER\"; export IMAGE_NAME=\"$IMAGE_NAME\"; export PRIVATE_KEY=\"$PRIVATE_KEY\"; sudo rm -rf ExampleApplication/; git clone https://github.com/JC-NCI/ExampleApplication.git; source ExampleApplication/deploy.sh"